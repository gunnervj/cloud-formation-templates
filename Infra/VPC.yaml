AWSTemplateFormatVersion: "2010-09-09"


Description: "Creates infra for bit-byte-box"
Parameters: 
  VPCName:
    Description: "Name for VPC that is being created"
    Type: String
    Default: "thebitbyteboxVPC"
    
  Region:
    Description: "Region where VPC needs to be created"
    Type: String
    Default : "ap-south-1"
    AllowedValues:
      - ap-south-1
      - us-east-1
  Owner:
    Description: "Owner of VPC"
    Type: String
    Default: "thebitbytebox"

  VPCFLowLogRetentionDays:
    Description: "How many days VPC Flow Logs should be retained?"
    Type: Number
    Default: 90
    MinValue: 30 
    ConstraintDescription: "Minimum log retention days is 30. If you leave it blank, logs will be retianed for 90 days."

  Environment:
    Description: "Which environment the VPC is created for."
    Type: String
    Default: "Development"
    ConstraintDescription: "Environment can be [Development, QA, Production]"
    AllowedValues:
      - "Development"
      - "QA"
      - "Production"

Mappings:
  SubnetConfiguration:
    VPC:
      CIDR: "10.0.0.0/16"
    Public1:
      CIDR: "10.0.1.0/24"
    Public2:
      CIDR: "10.0.2.0/24"
    Private1:
      CIDR: "10.0.16.0/20"
    Private2:
      CIDR: "10.0.32.0/20"
  AZRegions:
    ap-south-1:
      AZs: ["a", "b"]
    us-east-1:
      AZs: ["a", "b"]


Conditions:
  IsProduction: !Equals
    - !Ref "Environment"
    - "Production"
  
  IsQA: !Equals
    - !Ref "Environment"
    - "QA"

  IsMultiZone: !Or
    - !Condition "IsProduction"
    - !Condition "IsQA"

Resources:
  VPC:
    Type: "AWS::EC2::VPC"
    Properties:
      EnableDnsSupport: "true"
      EnableDnsHostnames: "true"
      CidrBlock: !FindInMap [ "SubnetConfiguration", "VPC", "CIDR" ]
      Tags:
        - 
          Key: "Owner"
          Value: !Ref Owner
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        - 
          Key: "Name"
          Value: !Ref "VPCName"
        - 
          Key: "Environment"
          Value: !Ref "Environment"
  
  MyVPCLogGroup:
    Type: "AWS::Logs::LogGroup"
    Properties:
      RetentionInDays: !Ref VPCFLowLogRetentionDays
      LogGroupName: !Join
        - ""
        - - !Ref "VPCName"
          - "-flowlog-group-"
          - !Ref "Environment"
          

  MyVPCFlowLogRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "vpc-flow-logs.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: !Join 
            - ""
            - - !Ref "VPCName"
              - "-flow-log-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:DescribeLogGroups"
                  - "logs:DescribeLogStreams"
                Resource: !GetAtt "MyVPCLogGroup.Arn"
      Tags:
        - 
          Key: "Owner"
          Value: !Ref Owner
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        - 
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-flowlog-role"
        - 
          Key: "Environment"
          Value: !Ref "Environment"
  
  MyVPCFlowLogs:
    Type: "AWS::EC2::FlowLog"
    Properties:
      DeliverLogsPermissionArn: !GetAtt "MyVPCFlowLogRole.Arn"
      LogGroupName: !Ref "MyVPCLogGroup"
      ResourceId: !Ref "VPC"
      ResourceType: "VPC"
      TrafficType: "ALL"
  
  PublicSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join 
        - ""
        - - !Ref "Region"
          - Fn::Sub: 
            - "${AZ}"
            - AZ: !Select [0, !FindInMap ["AZRegions", !Ref "Region", "AZs"]]
      CidrBlock: !FindInMap ["SubnetConfiguration", "Public1", "CIDR"]
      MapPublicIpOnLaunch: "true"
      Tags:
        - 
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        - 
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-"
              - !Select [0, !FindInMap ["AZRegions", !Ref "Region", "AZs"]]
        - 
          Key: "Environment"
          Value: !Ref "Environment"
  

  PublicSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join
        - ""
        - - !Ref "Region"
          - !Select [1, !FindInMap ["AZRegions", !Ref "Region",  AZs] ]
      CidrBlock: !FindInMap ["SubnetConfiguration", "Public2", CIDR]
      MapPublicIpOnLaunch: "true"
      Tags:
        - 
          Key: "Owner"
          Value:  !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        - 
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-"
              - !Select [1, !FindInMap ["AZRegions", !Ref "Region", "AZs"]]
        - 
          Key: "Environment"
          Value: !Ref "Environment"
  
  PrivateSubnet1:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join
        - ""
        - - !Ref "Region"
          - !Select [0, !FindInMap ["AZRegions", !Ref "Region", "AZs"] ]
      CidrBlock: !FindInMap ["SubnetConfiguration", "Private1", "CIDR"]
      Tags:
        - 
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-"
              - !Select [0, !FindInMap [ "AZRegions", !Ref "Region", "AZs"] ]
        - 
          Key: "Environment"
          Value: !Ref "Environment"
  
  PrivateSubnet2:
    Type: "AWS::EC2::Subnet"
    Properties:
      VpcId: !Ref "VPC"
      AvailabilityZone: !Join
        - ""
        - - !Ref "Region"
          - !Select [1, !FindInMap [ "AZRegions", !Ref "Region", "AZs"]]
      CidrBlock: !FindInMap ["SubnetConfiguration", "Private2", "CIDR"]
      Tags:
        - 
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-"
              - !Select [1, !FindInMap [ "AZRegions", !Ref "Region", "AZs"] ]
        - 
          Key: "Environment"
          Value: !Ref "Environment"
      
  MyInternetGateway:
    Type: "AWS::EC2::InternetGateway"
    Properties:
      Tags:
        - 
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        - 
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref VPCName
              - "-IGW"
        - 
          Key: "Environment"
          Value: !Ref "Environment"
  
  MyInternetGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      VpcId: !Ref "VPC"
      InternetGatewayId: !Ref "MyInternetGateway"

  PublicRouteTable:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        -
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-route-table"
        - 
          Key: "Environment"
          Value: !Ref "Environment"


  PublicRoute:
    Type: "AWS::EC2::Route"
    DependsOn: "MyInternetGatewayAttachment"
    Properties:
      RouteTableId: !Ref "PublicRouteTable"
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref "MyInternetGateway"

  PublicRouteSubnetAssoForSubnet1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      RouteTableId: !Ref "PublicRouteTable"

  PublicRouteSubnetAssoForSubnet2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Condition: "IsMultiZone"
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      RouteTableId: !Ref "PublicRouteTable"
  

  
  PublicNetworkAcl:
    Type: "AWS::EC2::NetworkAcl"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        -
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-public-nacl"
        - 
          Key: "Environment"
          Value: !Ref "Environment"


  InboundPublicNetworkACLEntryHttp:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "80"
        To: "80"
  
  InboundPublicNetworkACLEntryHttps:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "200"
      Protocol: "6"
      RuleAction: "allow"
      Egress: "false"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "443"
        To: "443"
  

  OutboundPublicNetworkAclEntryHttp:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "100"
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "80"
        To: "80"


  OutboundPublicNetworkAclEntryHttps:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "200"
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "443"
        To: "443"


  OutboundPublicNetworkAclEntryEphemeral:
    Type: "AWS::EC2::NetworkAclEntry"
    Properties:
      NetworkAclId: !Ref "PublicNetworkAcl"
      RuleNumber: "300"
      Protocol: "6"
      RuleAction: "allow"
      Egress: "true"
      CidrBlock: "0.0.0.0/0"
      PortRange:
        From: "32768"
        To: "65535"


  PublicSubnetNetworkAclAssociation1:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Properties:
      SubnetId: !Ref "PublicSubnet1"
      NetworkAclId: !Ref "PublicNetworkAcl"


  PublicSubnetNetworkAclAssociation2:
    Type: "AWS::EC2::SubnetNetworkAclAssociation"
    Condition: "IsMultiZone"
    Properties:
      SubnetId: !Ref "PublicSubnet2"
      NetworkAclId: !Ref "PublicNetworkAcl"

  ElasticIP1:
    Type: "AWS::EC2::EIP"
    Properties:
      Domain: "vpc"
  

  NATGateway1:
    Type: "AWS::EC2::NatGateway"
    Properties: 
      AllocationId: !GetAtt "ElasticIP1.AllocationId"
      SubnetId: !Ref "PublicSubnet1"

  ElasticIP2:
    Type: "AWS::EC2::EIP"
    Condition: "IsMultiZone"
    Properties:
      Domain: "vpc"

  NATGateway2:
    Type: "AWS::EC2::NatGateway"
    Condition: "IsMultiZone"
    Properties: 
      AllocationId: !GetAtt "ElasticIP2.AllocationId"
      SubnetId: !Ref "PublicSubnet2"


  PrivateRouteTable1:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        -
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-route-table-1"
        - 
          Key: "Environment"
          Value: !Ref "Environment"

  PrivateRouteToInternet1:
    Type: "AWS::EC2::Route"
    Properties:
      RouteTableId: !Ref "PrivateRouteTable1"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref "NATGateway1"


  PrivateRouteTable2:
    Type: "AWS::EC2::RouteTable"
    Properties:
      VpcId: !Ref "VPC"
      Tags:
        -
          Key: "Owner"
          Value: !Ref "Owner"
        - 
          Key: "Application"
          Value: !Ref "AWS::StackName"
        -
          Key: "Name"
          Value: !Join
            - ""
            - - !Ref "VPCName"
              - "-private-route-table-2"
        - 
          Key: "Environment"
          Value: !Ref "Environment"

  PrivateRouteToInternet2:
    Type: "AWS::EC2::Route"
    Condition: "IsMultiZone"
    Properties:
      RouteTableId:
        Ref: "PrivateRouteTable2"
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId:
        Ref: "NATGateway2"        


  PrivateSubnetRouteTableAsso1:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId:
        Ref: "PrivateSubnet1"
      RouteTableId: !Ref "PrivateRouteTable1"

  PrivateSubnetRouteTableAsso2:
    Type: "AWS::EC2::SubnetRouteTableAssociation"
    Properties:
      SubnetId: !Ref "PrivateSubnet2"
      RouteTableId: !Ref "PrivateRouteTable2"

Outputs:

  VPC:
    Description: "VPC"
    Value: !Ref "VPC"
  
  PublicSubnet1:
    Description: "Public Subnet 1"
    Value: !Ref "PublicSubnet1"
    Export:
      Name: !Join
        - ""
        - - !Ref "Region"
          - !Sub "-${AWS::StackName}-PublicSubnet1"

  PublicSubnet2:
    Description: "Public Subnet 2"
    Value: !Ref "PublicSubnet2"

  PrivateSubnet1:
    Description: "Private Subnet 1"
    Value: !Ref "PrivateSubnet1"

  PrivateSubnet2:
    Description: "Private Subnet 2"
    Value: !Ref "PrivateSubnet2"
    Export:
      Name: !Join
        - ""
        - - !Ref "Region"
          - !Sub "-${AWS::StackName}-PrivateSubnet2"

  PublicSubnets:
    Description: "List of public subnets"
    Value: !Join 
      - ","
      - - !Ref PublicSubnet1
        - !Ref PublicSubnet2

  PrivateSubnets:
    Description: "List of private subnets"
    Value: !Join 
      - ","
      - - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2